/*
 *
 * OpenSAND is an emulation testbed aiming to represent in a cost effective way a
 * satellite telecommunication system for research and engineering activities.
 *
 *
 * Copyright Â© 2020 TAS
 *
 *
 * This file is part of the OpenSAND testbed.
 *
 *
 * OpenSAND is free software : you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see http://www.gnu.org/licenses/.
 *
 */

/**
 * @file OutputLog.cpp
 * @brief The OutputLog class represent a log generated by the application.
 * @author Fabrice Hobaya     <fhobaya@toulouse.viveris.com>
 * @author Mathias Ettinger   <mathias.ettinger@viveris.fr>
 */


#include "OutputLog.h"


const char *OutputLog::levels[] =
{
	"",
	"",
	"CRITICAL",
	"ERROR",
	"WARNING",
	"NOTICE",
	"INFO",
	"DEBUG",
	"",
	"",
	"EVENT",
};


OutputLog::OutputLog(log_level_t display_level, const std::string &name):
  name(name),
  display_level(display_level)
{
}


OutputLog::~OutputLog()
{
	handlers.clear();
}


log_level_t OutputLog::getDisplayLevel(void) const
{
	OutputLock acquire{lock};
	return this->display_level;
}


std::string OutputLog::getDisplayLevelString() const
{
	OutputLock acquire{lock};
	return levels[this->display_level];
}


void OutputLog::setDisplayLevel(log_level_t level)
{
	OutputLock acquire{lock};
	this->display_level = level;
}


void OutputLog::addHandler(std::shared_ptr<LogHandler> handler)
{
	OutputLock acquire{lock};
	handlers.push_back(handler);
}
