#!/bin/python3

"""Setup netns for OpenSAND emulator"""


import os
import re
import sys
import typing
import argparse
import subprocess
from shutil import which
from pathlib import Path
from contextlib import suppress

from opensand_network import opensand_network_utils as utils


IDs = typing.Iterable[int]


class FilePathType(argparse.FileType):
    def __call__(self, argument):
        with super().__call__(argument) as _file:
            if _file is sys.stdin:
                raise ValueError('Cannot read from stdin, pass in a file path instead')
            return str(Path(_file.name).resolve())


def create_tap(name: str, netns: str, address: str, mac: str):
    utils.create_tap_iface(name, netns)
    utils.set_mac_address(name, mac, netns)
    utils.add_address(name, address, netns)
    utils.set_up(name, netns)


def create_network(tag: str, netns: str, address: str, bridge: str):
    veth_remote = f'{tag}_{netns}'
    veth_local = f'{tag}_lo_{netns}'
    utils.create_veth_ifaces_pair(veth_remote, veth_local)
    utils.move_iface(veth_remote, netns)
    utils.add_address(veth_remote, address, netns)
    utils.attach_iface(bridge, veth_local)
    utils.set_up(veth_local)
    utils.set_up(veth_remote, netns)


def create_entity(entity: str, entity_id: int, dev_bridge: str, emu_bridge: str, setup_tap: bool):
    name = f'{entity}{entity_id}'
    utils.create_netns(name)
    utils.set_up('lo', name)
    create_network('dev', name, f'192.168.100.{entity_id+1}/24', dev_bridge)
    create_network('emu', name, f'192.168.18.{entity_id+1}/24', emu_bridge)

    if setup_tap:
        create_tap('opensand_tap', name, f'192.168.63.{entity_id}/24', f'00:00:00:00:00:{entity_id+1:0>2X}')


def _prepare_isl_env(satellite_id: int, isl_id: int = None, isl_bridge: str = 'opensand_isl'):
    netns = f'sat{satellite_id}'

    if isl_id is not None:
        utils.delete_iface(f'isl{satellite_id}_{isl_id}_veth', netns)
        utils.delete_iface(f'isl_{isl_id}', netns)
    else:
        isl_id = 1 + max(
                (
                    int(name.split('_')[1])
                    for name in utils.list_ifaces(netns)
                    if name.split('_')[-1] == 'tap'
                ),
                default=0
        )

        tap_name = f'isl_{isl_id}_tap'
        create_tap(tap_name, netns,
                   f'10.0.{satellite_id}.{isl_id}/16',
                   f'00:00:00:00:{satellite_id:0>2X}:{isl_id:0>2X}')

        bridge_name = f'isl_{isl_id}_bridge'
        utils.create_bridge(bridge_name, [tap_name], netns)
        utils.set_up(bridge_name, netns)

    sock_src = f'isl_{isl_id}'
    sock_dest = f'isl_sock{satellite_id}_{isl_id}'
    utils.create_veth_ifaces_pair(sock_src, sock_dest)
    utils.move_iface(sock_src, netns)
    utils.add_address(sock_src, f'10.10.{satellite_id}.{isl_id}/16', netns)
    utils.attach_iface(isl_bridge, sock_dest)
    utils.set_up(sock_src, netns)
    utils.set_up(sock_dest)

    return isl_id


def create_isl(src_id: int, dest_id: int, isl_bridge: str = 'opensand_isl', src_isl_id: int = None, dest_isl_id: int = None):
    src_name = f'sat{src_id}'
    dest_name = f'sat{dest_id}'

    src_isl_id = _prepare_isl_env(src_id, src_isl_id, isl_bridge)
    dest_isl_id = _prepare_isl_env(dest_id, dest_isl_id, isl_bridge)

    src_veth = f'isl{src_id}_{src_isl_id}_veth'
    dest_veth = f'isl{dest_id}_{dest_isl_id}_veth'
    utils.create_veth_ifaces_pair(src_veth, dest_veth)

    utils.move_iface(src_veth, src_name)
    utils.attach_iface(f'isl_{src_isl_id}_bridge', src_veth, src_name)

    utils.move_iface(dest_veth, dest_name)
    utils.attach_iface(f'isl_{dest_isl_id}_bridge', dest_veth, dest_name)

    utils.set_up(src_veth, src_name)
    utils.set_up(dest_veth, dest_name)


def setup(terminals: IDs, gateways: IDs, satellites: IDs, dev_bridge: str, emu_bridge: str, isl_bridge: str):
    utils.create_bridge(dev_bridge, [])
    utils.create_bridge(emu_bridge, [])
    utils.create_bridge(isl_bridge, [])

    for id in terminals:
        create_entity('st', id, dev_bridge, emu_bridge, True)
    for id in gateways:
        create_entity('gw', id, dev_bridge, emu_bridge, True)
    for id in satellites:
        create_entity('sat', id, dev_bridge, emu_bridge, False)
        utils.create_tap_iface('opensand_regen', f'sat{id}')
        utils.set_up('opensand_regen', f'sat{id}')

    utils.add_address(dev_bridge, '192.168.100.100/24')
    utils.set_up(dev_bridge)
    utils.set_up(emu_bridge)
    utils.set_up(isl_bridge)


def clean(dev_bridge: str, emu_bridge: str, isl_bridge: str):
    utils.RAISE_ERROR = False

    pattern = re.compile(r'(st|gw|sat)\d+')
    for netns in utils.list_netns():
        with suppress(KeyError):
            name = netns['name']
            if pattern.fullmatch(name):
                utils.delete_netns(name)

    utils.delete_iface(dev_bridge)
    utils.delete_iface(emu_bridge)
    utils.delete_iface(isl_bridge)

    utils.RAISE_ERROR = True


def launch(entity_kind: str, entity_id: int, topology: str, infrastructure: str, profile: str=None, debug: bool=False, check: bool=False):
    command = ['ip', 'netns', 'exec', f'{entity_kind}{entity_id}']

    sudo_user = os.getenv('SUDO_USER')
    if sudo_user:
        command.extend(('sudo', '--preserve-env=LD_LIBRARY_PATH', '-u', sudo_user))

    if debug:
        command.extend(('gdb', '--args'))

    command.extend((which('opensand'), '-v', '-i', infrastructure, '-t', topology))
    if profile is not None:
        command.extend(('-p', profile))
    if check:
        command.append('-c')

    subprocess.run(command, check=True)


def create_ip_interfaces(tap_name, bridge_name, address_mask):
    utils.create_tap_iface(tap_name)
    utils.set_up(tap_name)
    utils.create_bridge(bridge_name, [tap_name])
    utils.set_up(bridge_name)
    utils.add_address(bridge_name, address_mask)


def create_eth_interfaces(tap_name, bridge_name, interface):
    utils.create_tap_iface(tap_name)
    utils.set_up(tap_name)
    utils.create_bridge(bridge_name, [tap_name, interface])
    utils.set_up(bridge_name)


def clean_interfaces(tap_name, bridge_name):
    utils.delete_iface(bridge_name)
    utils.delete_iface(tap_name)


def command_line_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description=__doc__, fromfile_prefix_chars='@')
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument(
            '-l', '--ld-library-path', action='append',
            help='Prepend the provided path to the LD_LIBRARY_PATH '
            'environment variable of the spawned process')
    parser.add_argument(
            '-p', '--path', action='append',
            help='Prepend the provided path to the PATH '
            'environment variable of the spawned proccess')
    subparsers = parser.add_subparsers(title='Mode', help='Mode of operation')
    subparsers.required = True

    parser_clean = subparsers.add_parser('clean', help='Remove netns that were previously created')
    parser_clean.add_argument(
            '-d', '--dev', '--dev-bridge',
            dest='dev_bridge',
            metavar='NAME',
            default='opensand_dev',
            help='Name of the dev bridge')
    parser_clean.add_argument(
            '-e', '--emu', '--emu-bridge',
            dest='emu_bridge',
            metavar='NAME',
            default='opensand_emu',
            help='Name of the emu bridge')
    parser_clean.add_argument(
            '-i', '--isl', '--isl-bridge',
            dest='isl_bridge',
            metavar='NAME',
            default='opensand_isl',
            help='Name of the ISL bridge')

    def unsigned_byte(value: str) -> int:
        value = int(value)
        if value < 0:
            raise ValueError(f'invalid negative value: {value}')
        if value > 0xFF:
            raise ValueError(f'invalid non-byte value: {value}')
        return value

    parser_setup = subparsers.add_parser('setup', help='Create netns to run OpenSAND in')
    parser_setup.add_argument(
            '-d', '--dev', '--dev-bridge',
            dest='dev_bridge',
            metavar='NAME',
            default='opensand_dev',
            help='Name of the dev bridge')
    parser_setup.add_argument(
            '-e', '--emu', '--emu-bridge',
            dest='emu_bridge',
            metavar='NAME',
            default='opensand_emu',
            help='Name of the emu bridge')
    parser_setup.add_argument(
            '-i', '--isl', '--isl-bridge',
            dest='isl_bridge',
            metavar='NAME',
            default='opensand_isl',
            help='Name of the ISL bridge')
    parser_setup.add_argument(
            '-t', '--st', '--terminal',
            dest='terminals',
            metavar='ID',
            default=(),
            type=unsigned_byte,
            nargs='+',
            help='IDs of terminals to create netns for')
    parser_setup.add_argument(
            '-g', '--gw', '--gateway',
            dest='gateways',
            metavar='ID',
            default=(),
            type=unsigned_byte,
            nargs='+',
            help='IDs of gateways to create netns for')
    parser_setup.add_argument(
            '-s', '--sat', '--satellite',
            dest='satellites',
            metavar='ID',
            default=(),
            type=unsigned_byte,
            nargs='+',
            help='IDs of satellites to create netns for')

    parser_isl = subparsers.add_parser('isl', help='Setup interfaces in satellites meant for ISL')
    parser_isl.add_argument(
            'src_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of a satellite at one end of the ISL')
    parser_isl.add_argument(
            'dest_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of a satellite at the other end of the ISL')
    parser_isl.add_argument(
            '--reuse-isl-src-id', '-s',
            dest='src_isl_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of a previous ISL on SRC_ID whose connection will be broken and reattached to DEST_ID')
    parser_isl.add_argument(
            '--reuse-isl-dest-id', '-d',
            dest='dest_isl_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of a previous ISL on DEST_ID whose connection will be broken and reattached to SRC_ID')
    parser_isl.add_argument(
            '-i', '--isl', '--isl-bridge',
            dest='isl_bridge',
            metavar='NAME',
            default='opensand_isl',
            help='Name of the ISL bridge')

    def ip_address(value):
        import ipaddress
        parsed = ipaddress.ip_address(value)
        return parsed.compressed

    parser_eth = subparsers.add_parser(
            'network', help='Setup interfaces to connect an terrestrial entity to a physical network')
    parser_eth.add_argument(
            'entity_kind',
            choices=('st', 'gw'),
            help='Type of the entity to connect')
    parser_eth.add_argument(
            'entity_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of the entity to connect')
    group_address = parser_eth.add_argument_group(
            'By Address',
            'Assign an address to a virtual interface connected to the '
            'entity so you can route your traffic through it')
    group_address.add_argument(
            '--address', '-a',
            type=ip_address,
            help='Address to assign to the entity')
    group_bridge = parser_eth.add_argument_group(
            'By Bridge',
            'Bind a physical interface to the entity so any traffic received '
            'on this interface is automatically handled by the entity')
    group_bridge.add_argument(
            '--interface', '-i',
            help='Physical interface to bind to the entity')
    group_bridge.add_argument(
            '--bridge-name', '--bridge', '-b',
            help='Name of the bridge used to bind the entity '
            'to the physical network, if the `-i` option is provided')

    parser_launch = subparsers.add_parser('launch', help='Run OpenSAND inside a netns')
    parser_launch.add_argument(
            '--debug', '--gdb',
            action='store_true',
            help='Run the OpenSAND process inside GDB')
    parser_launch.add_argument(
            '--check', '-c',
            action='store_true',
            help='Perform basic checks of the configuration '
            'files instead of a full OpenSAND run and print '
            'the liboutput whole configuration')
    parser_launch.add_argument(
            'entity_kind',
            choices=('st', 'gw', 'sat'),
            help='Type of the entity that will be launched')
    parser_launch.add_argument(
            'entity_id',
            metavar='ID',
            type=unsigned_byte,
            help='ID of the entity that will be launched')
    parser_launch.add_argument(
            'topology',
            type=FilePathType('r'),
            help='Path to the topology.xml file for this entity')
    parser_launch.add_argument(
            'infrastructure',
            type=FilePathType('r'),
            help='Path to the infrastructure.xml file for this entity')
    parser_launch.add_argument(
            'profile',
            type=FilePathType('r'),
            nargs='?',
            help='Path to the profile.xml file for this entity')

    parser_manual = subparsers.add_parser('manual', help='Manual bridge and TAP setup outside of netns')
    parser_manual.add_argument(
            'tap_name',
            metavar='TAP',
            help='Name of the TAP interface to manage')
    parser_manual.add_argument(
            'bridge_name',
            metavar='BRIDGE',
            help='Name of the bridge to manage')

    manual_subparsers = parser_manual.add_subparsers(title='Protocol', help='Protocol to setup')
    manual_subparsers.required = True

    parser_manual_eth = manual_subparsers.add_parser('eth', help='Address the TAP interface through an ethernet interface')
    parser_manual_eth.add_argument(
            'interface',
            metavar='IFACE',
            help='Name of the interface to connect to the TAP through the bridge')

    def ip_address_mask(value):
        import ipaddress
        parsed = ipaddress.ip_interface(value)
        return parsed.compressed

    parser_manual_ip = manual_subparsers.add_parser('ip', help='Address the TAP interface through an IP network')
    parser_manual_ip.add_argument(
            'address_mask',
            metavar='ADDRESS/MASK',
            type=ip_address_mask,
            help='Address of the network to connect the bridge to')

    parser_manual_clean = manual_subparsers.add_parser('clear', help='Remove manually created TAP and bridge')

    # Set subparsers options to automatically call the right
    # function depending on the chosen subcommand
    def find_subfunction(**args):
        main = args.pop('subfunction')
        return main(**args)

    parser_clean.set_defaults(function=clean)
    parser_setup.set_defaults(function=setup)
    parser_isl.set_defaults(function=create_isl)
    parser_launch.set_defaults(function=launch)
    parser_manual.set_defaults(function=find_subfunction)
    parser_manual_eth.set_defaults(subfunction=create_eth_interfaces)
    parser_manual_ip.set_defaults(subfunction=create_ip_interfaces)
    parser_manual_clean.set_defaults(subfunction=clean_interfaces)

    return parser


def _prepend_path_env(paths: typing.Optional[typing.List[str]], env_key: str):
    if paths:
        _path = os.environ.get(env_key)
        if _path:
            paths.append(_path)
        os.environ[env_key] = ':'.join(paths)


if __name__ == "__main__":
    args = vars(command_line_parser().parse_args())
    utils.VERBOSITY = args.pop('verbose')

    _prepend_path_env(args.pop('ld_library_path'), 'LD_LIBRARY_PATH')
    _prepend_path_env(args.pop('path'), 'PATH')

    main = args.pop('function')
    main(**args)
