#!/bin/bash

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IFS='/' read -ra DIR_LIST <<< "$THIS_DIR"
FLAG=""

# Check current distribution
CURRENT=${DIR_LIST[-1]}

# Get list of all supported modules
cd $THIS_DIR
MODULES=`find . -name 'debian' -printf '%h '`
MODULES=`echo $(printf '%s\n' $MODULES | sort -u)`
MODULES=`sed -r 's/\.\///g' <<< $MODULES`

usage()
{
    echo 'Usage : build-pkg [OPTIONS] -s /path/to/sources -d /path/to/build <modules>'
    echo 'Available options:'
    echo '      -i          Install the module after packaging'
    echo '      -I          Install build dependencies automatically'
    echo '      -f          Specify a user flag to add to the package version'
    echo 'List of possible modules:'
    echo $MODULES
    exit 1
}

echo_incomplete_line()
{
    stdbuf -o0 echo -n "$@"
}

build()
{
    echo "Building module $MODULE for $CURRENT"
    
    # Get main dir
    AUX="$THIS_DIR/$MODULE"
    while [ "$AUX" != '/' ]
    do
        AUX=`dirname "$AUX"`
        MAIN_DIR=`find $AUX -maxdepth 1 -name 'build-pkgs' -printf '%h'`
        if [ ! -z "$MAIN_DIR" ]
        then
            CURRENT=`basename $MAIN_DIR`
            MAIN_DIR=`dirname $MAIN_DIR`
            break
        fi
    done
    DIR=`echo "${THIS_DIR#"$MAIN_DIR"/"$CURRENT"/""}"`
    cd $THIS_DIR/$MODULE
    
    if [ -d $SRC_DIR/$MODULE ]
    then
        # Fetching sources
        echo_incomplete_line "  * Fetching source files ($CURRENT)... "
        cp -r $SRC_DIR/$MODULE/* $DST_DIR/src/$MODULE
        cp $SRC_DIR/ChangeLog $DST_DIR/src/ 2>/dev/null
        success
    fi

    # Copy new files
    echo_incomplete_line "  * Fetching packaging files ($CURRENT)..."
    cp -r * $DST_DIR/src/$MODULE
    success

    if [ -f "$THIS_DIR/$MODULE/pre-src" ]
    then
        # Prepare sources
        echo_incomplete_line "  * Prepare source files ($CURRENT)... "
        $THIS_DIR/$MODULE/pre-src -s $SRC_DIR/$MODULE -d $DST_DIR/src/$MODULE && success || error
    fi

    # Update version with the user flag
    CHANGELOG="$DST_DIR/src/$MODULE/debian/changelog"
    if [ ! -z "$FLAG" -a -f "$CHANGELOG" ]
    then
        # Add flag to changelog version
        CUR_VERS=$(head -1 $CHANGELOG | sed -r -e 's/^(.*)\((.*)\)(.*)$/\2/')
        NEW_VERS="$CUR_VERS~$FLAG"
        sed -i -r -e "1s/^(.*)\(([^+]+)(\+.+)?\)(.*)$/\1\($NEW_VERS\)\4/" $CHANGELOG
        TEMP=$(echo $CUR_VERS | sed -r -e 's/\+/\\\+/g')

        # Add flag to control version
        CONTROL="$DST_DIR/src/$MODULE/debian/control"
        if [ -f "$CONTROL" ]; then
            sed -i -r -e "s/$TEMP/$NEW_VERS/g" $CONTROL
        fi

        # Add flag to configure.ac version
        CONFIGURE_AC=$(find $DST_DIR/src/$MODULE -name "configure.ac")
        for CONFIG in $CONFIGURE_AC; do
            sed -i -r -e "s/$TEMP/$NEW_VERS/g" $CONFIG
        done
    fi

    if [ ! -z "$INSTALL_DEP" ]
    then
        # Get dependencies from control file
        DEPS=`sed -n '/Build-Depends:/,/:/ p' "$DST_DIR/src/$MODULE/debian/control" | \
              sed -r 's/^[^:]+: //g' | sed -r 's/\([^\)]+\)//g' | \
              sed -r 's/( )?,//g' | sed '$d' | tr '\n' ' '`

        # Install dependencies
        echo_incomplete_line "  * Installing build-dependencies ... "
        sudo apt-get install --no-install-recommends -y --allow-downgrades ${DEPS} 1>/dev/null && success || error "Failed" "installing" ${DEPS}
    fi
    
    # Launch dpkg command to build package
    cd $DST_DIR/src/$MODULE
    echo_incomplete_line "  * Packaging module ... "
    if [ -f ./autogen.sh ]
    then
        ./autogen.sh 1>configure.log 2>&1 || error configure.log
    fi
    dpkg-buildpackage -rsudo -uc -us -tc 1>build.log 2>&1 && success || error build.log
    cd $THIS_DIR
}

error()
{
    echo "ERROR!"
    if [ $# == 1 ]
    then
      cat "$1" >&2
    fi
    if [ $# != 0 ]
    then
      echo "$@" >&2
    fi
    exit 1
}

success()
{
    echo "done."
}

move()
{
    # Save only deb files
    mv $DST_DIR/src/$MODULE/../*.deb $DST_DIR/pkgs 2>/dev/null
    rm -f $DST_DIR/src/$MODULE/../*.dsc
    rm -f $DST_DIR/src/$MODULE/../*.changes
    rm -f $DST_DIR/src/$MODULE/../*.tar.gz
}

clean()
{
    # Delete any remaining .deb or any files remaining from last packaging
    rm -f $DST_DIR/src/$MODULE/../*.deb
    rm -f $DST_DIR/src/$MODULE/../*.dsc
    rm -f $DST_DIR/src/$MODULE/../*.changes
    rm -f $DST_DIR/src/$MODULE/../*.tar.gz
    sudo rm -rf $DST_DIR/src/$MODULE/*
}

install()
{
    # Get list of available modules:
    DEBS=`find $DST_DIR/src/$MODULE/../ -maxdepth 1 -name '*.deb' -printf "%f "`
    echo_incomplete_line "Installing packages $DEBS ..."
    cd $DST_DIR/src/$MODULE/../
    sudo dpkg -i $DEBS 2>&1 >$DST_DIR/src/out.log || error "$DST_DIR/src/out.log"
    success
    cd $THIS_DIR
}

while getopts ":s:d:iIhf:" o; do
    case "${o}" in
        s)
            SRC_DIR=`echo $OPTARG | sed 's/\/$//'`
            ;;
        d)
            DST_DIR=`echo $OPTARG | sed 's/\/$//'`
            ;;
        h)
            usage
            ;;
        i)
            INSTALL=true
            ;;
        I)
            INSTALL_DEP='-I'
            ;;
        f)
            FLAG=$OPTARG
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# Ask sudo password
sudo echo -n ""

MODULE=`echo $1 | sed 's/\/$//'`

# Show usage if module is not a valid option
if [[ ! " $MODULES " =~ " $MODULE " ]]
then
    echo "Invalid module \"$MODULE\"" && usage
fi

# Check if valid source dir
if [ ! -d "$SRC_DIR" ]
then
    echo "Invalid source dir \"$SRC_DIR\"" && usage
fi

# Create dirs if they don't exist. Empty if they do.
mkdir -p $DST_DIR/src/$MODULE
mkdir -p $DST_DIR/pkgs
clean

cd $MODULE
build
cd ..
if [ -v "INSTALL" ]
then
    install
fi
move
